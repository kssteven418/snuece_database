/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SQLparser)
import java.io.*;
import java.util.ArrayList;
import java.util.List;


public class SQLparser
{

  static ExtSort sorter;
  static Join join;
  static ArrayList<Table> tables;

  static boolean printMode = true;
  
  
  public static void main(String args []) throws ParseException
  {
    SQLparser parser = new SQLparser(System.in);
    
	tables = new ArrayList<Table>();
	
	//Table Y = new Table("src/Y.txt", "Y");
	//Table Z = new Table("src/Z.txt", "Z");
	Table S = new Table("src/S.txt", "S");
	Table R = new Table("src/R.txt", "R");
	Table B = new Table("src/B.txt", "B");

	//tables.add(Y);
	//tables.add(Z);
	tables.add(S);
	tables.add(R);
	tables.add(B);
	
	//System.out.println();

	sorter = new ExtSort();
	join = new Join();
	
    while (true)
    {
      System.out.println("Reading from stard input...");
      try
      {
        switch (SQLparser.one_line())
        {
          case -1 :
          System.out.println("NOK: Not a valid query.\n");
          break;
          case 0 : 
          System.out.println("OK.\n");
          break;
          case 1 : 
          System.out.println("Goodbye.\n");
          
          /* external sort mode change */
		  case 2:
		  //System.out.println("External sort mode changed.\n");
		  System.out.println("");
          break;
          case 3: // wrong mode selection input
          System.out.println("NOK: Not a valid mode input.\n");
          
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SQLparser.ReInit(System.in);
        System.out.println();
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        System.out.println();
        break;
      }
    }
  }
}



PARSER_END(SQLparser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN:
{
  < AND : "AND" > 
}

TOKEN : /* Statements */
{
  < SELECT : "select" >
| < FROM : "from" >
| < WHERE : "where" >
| < ORDERBY : "order by" >
| < BSIZE : "-bsize" > // buffer size B
| < RNUM : "-rnum" > // number of records per page
| < TIMING : "-timing" > // time mode : calculate execution time, default is false
| < PRINT : "-print" > // print mode : print the final table, default is true
| < WRITE : "-write" > // write mode : file output enable, default is true
| < JMODE : "-jmode" > // join mode : bnj, smj, hj
}


TOKEN:
{

 < ID : ( ["A"-"Z"]|["a"-"z"])(["0"-"9"]| ["A"-"Z"]|["a"-"z"])* > /* ID of table or attribute*/
| < OP : "="|"<"|">" >
| < VALUE : ((["0"-"9"])+)(("."["0"-"9"])?) >  /*float number */
| < STRING : ("\"")((["A"-"Z"]|["a"-"z"]|["0"-"9"])+)("\"") | ("\'")((["A"-"Z"]|["a"-"z"]|["0"-"9"])+)("\'") > /* 'String' or "string" */

}




int one_line():
{
  QueryList select_list=null;
  QueryList from_list=null;
  QueryList where_list=null;
  QueryList orderby_list=null;
  
  int output;
  Token value;
  float f;
  int valid;

  Token temp;
  int bsize;
  int rnum;
  
}
{

(    
  // Select Command
  (
    < SELECT > select_list=select() {
	  if(select_list != null) select_list.op_type = 1;
    }
  )

  //From Command
  (
    < FROM > from_list=from() {
	  from_list.op_type = 2;
    }
  )
  
  //Where Command
  (
    < WHERE > where_list=where() {
      where_list.op_type = 3;	  
    }
  )? // one or zero where statement possible

  //Order By Clause
  (
    < ORDERBY > orderby_list=orderby() {
		orderby_list.op_type = 4;
    }
  )? // one or zero order by statement possible


  //End with SemiColon
  ";"
  {
    //Function to interpret the comm
    //by select, from, where list
    
	Handler handler = new Handler(select_list, from_list, where_list, orderby_list, tables, sorter, join, printMode);

    //print the parsed result
    //System.out.println("Parsed Result...");
    //System.out.println();
    //handler.print();
    
	//return validity of the query
	return handler.handle();
  }
)


/* For External Sorting, do some mode selection with std input */

| < BSIZE > temp=< VALUE >
 {
    try { 
      bsize = Integer.parseInt(temp.toString());
      sorter.setBsize(bsize);
      join.setBsize(bsize);
      System.out.println("bsize : " + sorter.bsize);
      return 2;
    } catch(Exception e) {
      return 3;
  }
 }
| < RNUM > temp=< VALUE >
 {
   try { 
     rnum = Integer.parseInt(temp.toString());
     sorter.setRnum(rnum);
     join.setRnum(rnum);
     System.out.println("rnum : " + sorter.rnum);
     return 2;
   } catch(Exception e) {
     return 3;
   }
 }
| < TIMING >  temp=< ID >
 {
    if(temp.toString().equals("on")) {
      sorter.setTiming(true);
      join.setTiming(true);
      System.out.println("Timing mode : on");
      return 2;
    }
    if(temp.toString().equals("off")) {
      sorter.setTiming(false);
      join.setTiming(false);
      System.out.println("Timing mode : false");
      return 2;
    }
    return 3;
 }
| < WRITE >  temp=< ID >
 {
    if(temp.toString().equals("on")) {
      sorter.setWrite(true);
      System.out.println("File I/O mode : on");
      return 2;
    }
    if(temp.toString().equals("off")) {
      sorter.setWrite(false);
      System.out.println("File I/O mode : false");
      return 2;
    }
    return 3;
 }
| < PRINT >  temp=< ID >
 {
    if(temp.toString().equals("on")) {
      printMode = true;
      System.out.println("Print mode : on");
      return 2;
    }
    if(temp.toString().equals("off")) {
      printMode = false;
      System.out.println("Print mode : off");
      return 2;
    }
    return 3;
 }

| < JMODE > temp=< ID >
{
	if(temp.toString().equals("bnj")) {
	  	join.jmode = 0;
	  	System.out.println("Join mode : Block Nested Loop Join");
		return 2;
	}
	
	if(temp.toString().equals("smj")) {
	  	join.jmode = 1;
	  	System.out.println("Join mode : Sort Merge Join");
		return 2;
	}
	
	if(temp.toString().equals("hj")) {
	  	join.jmode = 2;
	  	System.out.println("Join mode : Hash Join");
		return 2;
	}
	return 3;
}

// end statement
| ";"
  {
    return 1;
  }
}


/* SELECT COMMAND : * or table.attr_1, ..., table.attr_n */
QueryList select():
{
  // if *, then output is null
  // otherwise, it is a list of "table.attr" 
  QueryList output = null; 
                          
  Query q;
}
{

// if *, just return null value
  "*"
  {
    return output;
  }
  
// if not *, then parse and make a list of 'table.attribute'
| (
    q=attr() 
    {
	  output = new QueryList();
	  output.insert(q);
    }
  )
  (
	"," q=attr()  // each attributes are separated using ','
	{
	  output.insert(q);
	}
  )*
  {
    return output;
  }

}

/* FROM COMMAND : table_1, ..., table_n */
QueryList from():
{
  QueryList output = null;
  Query q;
}
{
// parse and make a list of 'table'
  (
    q=table() 
    {
	  output = new QueryList();
	  output.insert(q);
    }
  )
  (
	"," q=table() // each tables are separated using ','
	{
	  output.insert(q);
	}
  )?
  {
    return output;
  }
}

/* WHERE COMMAND : operation_1, ..., operation_n*/
QueryList where():
{
  QueryList output = null;
  Query q;
}
{
// parse and make a list of 'operation'
  (
    q=operation()
    {
	  output = new QueryList();
	  output.insert(q);
    }
  )
  (
	< AND > q=operation() // each operations are separated using 'AND'
	{
	  output.insert(q);
	}
  )?
  {
    return output;
  }
}

/* SELECT COMMAND : * or table.attr_1, ..., table.attr_n */
QueryList orderby():
{
  // if *, then output is null
  // otherwise, it is a list of "table.attr" 
  QueryList output = null; 
                          
  Query q;
}
{
  (
    q=attr() 
    {
	  output = new QueryList();
	  output.insert(q);
    }
  )
  {
    return output;
  }

}

//////////////////////////////////////////////////////////////////////


/* Table : "table" */
Query table():
{
  Query output;
  Token table;
}
{
  table=< ID > {
    output = new Query(table.toString());
    return output;
  }
}


/* attribute : "table.attr" */
Query attr():
{
  Query output;
  Token table;
  Token attr;
}
{
  table=< ID >"."attr=< ID > {
    output = new Query(table.toString(), attr.toString());
    return output;
  }
}


/* operation : "table.attr op value" (i.e. S.sid > 20)
                OR "table.attr op table.attr" (i.e. S.sid R.sid) */

Query operation():
{
  Query output;
  Token table;
  Token attr;
  Token operation;
  Token value;
  Token table2;
  Token attr2;

  String t;
  String a;
  char o;
}
{
  // left side of the operation is a common part
  // parse table.attr op
  (
    table=< ID >"."attr=< ID > operation=< OP >{
      t = table.toString();
      a = attr.toString();
      o = (operation.toString()).charAt(0);
    
    }
  )
  // right side of the operation can be either
  // 1) constant integer/float value  i.e. S.sid = 20
  (
	value=< VALUE > {
	  output = new Query(t, a, o, value.toString());
	  return output;
	}
  |
  // 2) constant String value   i.e. S.sname = 'Steven'
  // in this case, the string value must have either '...' or "..." format
    value=< STRING > {
	  output = new Query(t, a, o, value.toString());
	  return output;
	}
  |
  // 3) another table.attr   i.e. S.sid = R.sid
	table2=< ID >"."attr2=< ID >{
	  output = new Query(t, a, o, table2.toString(), attr2.toString());
	  return output;
	}
  )

}

  
