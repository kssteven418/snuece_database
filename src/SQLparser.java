/* Generated By:JavaCC: Do not edit this line. SQLparser.java */
import java.io.*;
import java.util.ArrayList;
import java.util.List;


public class SQLparser implements SQLparserConstants {

  static ExtSort sorter;
  static ArrayList<Table> tables;

  static boolean printMode = true;

  public static void main(String args []) throws ParseException
  {
    SQLparser parser = new SQLparser(System.in);

        //Table X = new Table("src/X.txt", "X");
        Table Z = new Table("src/Z.txt", "Z");
        Table S = new Table("src/S.txt", "S");
        Table R = new Table("src/R.txt", "R");
        Table B = new Table("src/B.txt", "B");
        tables = new ArrayList<Table>();
        //tables.add(X);
        tables.add(Z);
        tables.add(S);
        tables.add(R);
        tables.add(B);

        //System.out.println();

        sorter = new ExtSort();

    while (true)
    {
      System.out.println("Reading from stard input...");
      try
      {
        switch (SQLparser.one_line())
        {
          case -1 :
          System.out.println("NOK: Not a valid query.\u005cn");
          break;
          case 0 :
          System.out.println("OK.\u005cn");
          break;
          case 1 :
          System.out.println("Goodbye.\u005cn");

          /* external sort mode change */
                  case 2:
                  //System.out.println("External sort mode changed.\n");
                  System.out.println("");
          break;
          case 3: // wrong mode selection input
          System.out.println("NOK: Not a valid mode input.\u005cn");

          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SQLparser.ReInit(System.in);
        System.out.println();
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        System.out.println();
        break;
      }
    }
  }

  static final public int one_line() throws ParseException {
  QueryList select_list=null;
  QueryList from_list=null;
  QueryList where_list=null;
  QueryList orderby_list=null;

  int output;
  Token value;
  float f;
  int valid;

  Token temp;
  int bsize;
  int rnum;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      jj_consume_token(SELECT);
      select_list = select();
          if(select_list != null) select_list.op_type = 1;
      jj_consume_token(FROM);
      from_list = from();
          from_list.op_type = 2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        where_list = where();
      where_list.op_type = 3;
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDERBY:
        jj_consume_token(ORDERBY);
        orderby_list = orderby();
                orderby_list.op_type = 4;
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(19);
    //Function to interpret the comm
    //by select, from, where list

        Handler handler = new Handler(select_list, from_list, where_list, orderby_list, tables, sorter, printMode);

    //print the parsed result
    //System.out.println("Parsed Result...");
    //System.out.println();
    //handler.print();

        //return validity of the query
        {if (true) return handler.handle();}
      break;
    case BSIZE:
      jj_consume_token(BSIZE);
      temp = jj_consume_token(VALUE);
    try {
      bsize = Integer.parseInt(temp.toString());
      sorter.setBsize(bsize);
      System.out.println("bsize : " + sorter.bsize);
      {if (true) return 2;}
    } catch(Exception e) {
      {if (true) return 3;}
  }
      break;
    case RNUM:
      jj_consume_token(RNUM);
      temp = jj_consume_token(VALUE);
   try {
     rnum = Integer.parseInt(temp.toString());
     sorter.setRnum(rnum);
     System.out.println("rnum : " + sorter.rnum);
     {if (true) return 2;}
   } catch(Exception e) {
     {if (true) return 3;}
   }
      break;
    case TIMING:
      jj_consume_token(TIMING);
      temp = jj_consume_token(ID);
    if(temp.toString().equals("on")) {
      sorter.setTiming(true);
      System.out.println("Timing mode : on");
      {if (true) return 2;}
    }
    if(temp.toString().equals("off")) {
      sorter.setTiming(false);
      System.out.println("Timing mode : false");
      {if (true) return 2;}
    }
    {if (true) return 3;}
      break;
    case WRITE:
      jj_consume_token(WRITE);
      temp = jj_consume_token(ID);
    if(temp.toString().equals("on")) {
      sorter.setWrite(true);
      System.out.println("File I/O mode : on");
      {if (true) return 2;}
    }
    if(temp.toString().equals("off")) {
      sorter.setWrite(false);
      System.out.println("File I/O mode : false");
      {if (true) return 2;}
    }
    {if (true) return 3;}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      temp = jj_consume_token(ID);
    if(temp.toString().equals("on")) {
      printMode = true;
      System.out.println("Print mode : on");
      {if (true) return 2;}
    }
    if(temp.toString().equals("off")) {
      printMode = false;
      System.out.println("Print mode : off");
      {if (true) return 2;}
    }
    {if (true) return 3;}
      break;
    case 19:
      jj_consume_token(19);
    {if (true) return 1;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* SELECT COMMAND : * or table.attr_1, ..., table.attr_n */
  static final public QueryList select() throws ParseException {
  // if *, then output is null
  // otherwise, it is a list of "table.attr" 
  QueryList output = null;

  Query q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
    {if (true) return output;}
      break;
    case ID:
      q = attr();
          output = new QueryList();
          output.insert(q);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(21);
        q = attr();
          output.insert(q);
      }
    {if (true) return output;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* FROM COMMAND : table_1, ..., table_n */
  static final public QueryList from() throws ParseException {
  QueryList output = null;
  Query q;
    q = table();
          output = new QueryList();
          output.insert(q);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      q = table();
          output.insert(q);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return output;}
    throw new Error("Missing return statement in function");
  }

/* WHERE COMMAND : operation_1, ..., operation_n*/
  static final public QueryList where() throws ParseException {
  QueryList output = null;
  Query q;
    q = operation();
          output = new QueryList();
          output.insert(q);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      q = operation();
          output.insert(q);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return output;}
    throw new Error("Missing return statement in function");
  }

/* SELECT COMMAND : * or table.attr_1, ..., table.attr_n */
  static final public QueryList orderby() throws ParseException {
  // if *, then output is null
  // otherwise, it is a list of "table.attr" 
  QueryList output = null;

  Query q;
    q = attr();
          output = new QueryList();
          output.insert(q);
    {if (true) return output;}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////


/* Table : "table" */
  static final public Query table() throws ParseException {
  Query output;
  Token table;
    table = jj_consume_token(ID);
    output = new Query(table.toString());
    {if (true) return output;}
    throw new Error("Missing return statement in function");
  }

/* attribute : "table.attr" */
  static final public Query attr() throws ParseException {
  Query output;
  Token table;
  Token attr;
    table = jj_consume_token(ID);
    jj_consume_token(22);
    attr = jj_consume_token(ID);
    output = new Query(table.toString(), attr.toString());
    {if (true) return output;}
    throw new Error("Missing return statement in function");
  }

/* operation : "table.attr op value" (i.e. S.sid > 20)
                OR "table.attr op table.attr" (i.e. S.sid R.sid) */
  static final public Query operation() throws ParseException {
  Query output;
  Token table;
  Token attr;
  Token operation;
  Token value;
  Token table2;
  Token attr2;

  String t;
  String a;
  char o;
    table = jj_consume_token(ID);
    jj_consume_token(22);
    attr = jj_consume_token(ID);
    operation = jj_consume_token(OP);
      t = table.toString();
      a = attr.toString();
      o = (operation.toString()).charAt(0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUE:
      value = jj_consume_token(VALUE);
          output = new Query(t, a, o, value.toString());
          {if (true) return output;}
      break;
    case STRING:
      // 2) constant String value   i.e. S.sname = 'Steven'
        // in this case, the string value must have either '...' or "..." format
          value = jj_consume_token(STRING);
          output = new Query(t, a, o, value.toString());
          {if (true) return output;}
      break;
    case ID:
      // 3) another table.attr   i.e. S.sid = R.sid
              table2 = jj_consume_token(ID);
      jj_consume_token(22);
      attr2 = jj_consume_token(ID);
          output = new Query(t, a, o, table2.toString(), attr2.toString());
          {if (true) return output;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLparserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x200,0x87c40,0x200000,0x108000,0x200000,0x20,0x68000,};
   }

  /** Constructor with InputStream. */
  public SQLparser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLparser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLparser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLparser(SQLparserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
